#!/bin/env python
# Requires: ffmpeg sox librosa mutagen python3

import os
import random
import subprocess
import logging
import configparser
import time

def extract_id3_tags(track):
    try:
        # Extract ID3 tags from input MP3 file
        print(f"Extracting ID3 tags from {track}...")
        tag_command = f'ffprobe -v quiet -print_format json -show_format "{track}"'
        tags_output = subprocess.check_output(tag_command, shell=True, stderr=subprocess.STDOUT)
        tags = json.loads(tags_output.decode('utf-8'))
        # Extract artist and title from the tags
        artist = tags.get('format', {}).get('tags', {}).get('artist', 'Unknown Artist')
        title = tags.get('format', {}).get('tags', {}).get('title', 'Unknown Title')
        return artist, title
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to extract ID3 tags: {e.output.decode('utf-8')}")
        return 'Unknown Artist', 'Unknown Title'

def load_config():
    print("Loading configuration...")
    config = configparser.ConfigParser()
    config.read('config.ini')
    return config['DEFAULT']

def generate_playlist(config):
    print("Generating playlist...")
    music_folder = config.get('music_folder', './music/')
    music_files = [file for file in os.listdir(music_folder) if file.endswith((".mp3", ".wav", ".flac", ".aac"))]
    stingers_folder = config.get('stingers_folder', './stingers/')
    stinger_files = [file for file in os.listdir(stingers_folder) if file.endswith((".mp3", ".wav", ".flac", ".aac"))]

    # Shuffle the music files
    random.shuffle(music_files)

    # Shuffle the stinger files
    random.shuffle(stinger_files)

    # Create playlist
    playlist = []

    # Add music files to playlist
    for file in music_files:
        playlist.append((os.path.join(music_folder, file), 'music'))

    # Add stinger files to playlist
    stinger_interval = config.getint('stinger_interval', 3)
    stinger_max_interval = config.getint('stinger_max_interval', 8)
    stinger_count = 0
    for file in stinger_files:
        playlist.append((os.path.join(stingers_folder, file), 'stinger'))
        stinger_count += 1
        if stinger_count >= stinger_interval:
            # Reset stinger count after random interval
            stinger_count = 0
            # Randomize next stinger interval
            stinger_interval = random.randint(3, stinger_max_interval)

    print("Playlist generated.")
    return playlist

def main():
    print("Starting script...")
    # Load configuration
    config = load_config()

    # Configure logging
    log_file = config.get('error_log_file', 'error.log')
    logging.basicConfig(filename=log_file, level=logging.DEBUG,
                        format='%(asctime)s - %(levelname)s - %(message)s')

    while True:
        try:
            # Generate playlist
            print("Generating playlist...")
            playlist = generate_playlist(config)
            print(f"Playlist: {playlist}")

            # Iterate over playlist
            for track, track_type in playlist:
                print(f"Streaming: {track}")
                if track_type == 'music':
                    # Extract ID3 tags
                    artist, title = extract_id3_tags(track)

                    log_message = f"{artist} - {title}"
                    logging.debug(f"Log message: {log_message}")

                    # Stream the audio file using ffmpeg with ReplayGain
                    print(f"Streaming music: {artist} - {title}")
                    ffmpeg_command = f"ffmpeg -i {track} -af volume=replaygain=track -f mp3 icecast://{config['icecast_url']}:{config['icecast_port']}/{config['mount_point']} -loglevel error"
                    subprocess.run(ffmpeg_command, shell=True, check=True)
                elif track_type == 'stinger':
                    # Stream the stinger file using ffmpeg
                    print(f"Streaming stinger: {track}")
                    ffmpeg_command = f"ffmpeg -i {track} -f mp3 icecast://{config['icecast_url']}:{config['icecast_port']}/{config['mount_point']} -loglevel error"
                    subprocess.run(ffmpeg_command, shell=True, check=True)

        except Exception as e:
            logging.exception("An error occurred.")

        # Sleep for a day before regenerating playlist
        print("Sleeping for 24 hours...")
        time.sleep(86400)

if __name__ == "__main__":
    main()
